name: ðŸ“¶ Coverage

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: "0"
      RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cllvm-args=--inline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
      RUSTDOCFLAGS: "-Zprofile -Ccodegen-units=1 -Cllvm-args=--inline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Rust and set to nightly toolchain
      - name: Install Rust nightly
        run: rustup toolchain install nightly

      # Set the default toolchain to nightly for the job
      - name: Set default to nightly
        run: rustup default nightly

      # Confirm the Rust toolchain version
      - name: Confirm Rust version
        run: rustc --version

      # Configure cache for Cargo
      - name: Cache Cargo registry, index
        uses: actions/cache@v4
        id: cache-cargo
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/bin
            ~/.cargo/git
          key: linux-${{ runner.os }}-rust-cov-${{ hashFiles('**/Cargo.lock') }}

      # Run tests with all features on nightly
      - name: Test (cargo test)
        run: cargo +nightly test --workspace

      # Install grcov
      - uses: actions-rs/grcov@v0.1
        id: coverage

      # Upload to Codecov.io
      - name: Upload to Codecov.io
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ steps.coverage.outputs.report }}
