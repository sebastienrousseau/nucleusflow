searchState.loadedDescShard("nucleusflow", 0, "NucleusFlow Library\nTrait for content processing implementations.\nConcrete implementation of <code>ContentProcessor</code> that processes …\nConcrete implementation of <code>OutputGenerator</code> for generating …\nConcrete implementation of <code>TemplateRenderer</code> for rendering …\nMain content processing pipeline for NucleusFlow.\nConfiguration settings for NucleusFlow.\nTrait for output generation implementations.\nTrait for template rendering implementations.\nThe base path for content files.\nThe base path for template files.\nThe base path for output files.\nProvides command-line interface utilities. Command-line …\nProvides content processing utilities.\nThe directory containing content files.\nModule containing core utilities, such as configuration …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates output from the given content to the specified …\nProvides output generation utilities.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FileContentProcessor</code>.\nCreates a new <code>HtmlTemplateRenderer</code>.\nCreates a new <code>HtmlOutputGenerator</code>.\nCreates a new <code>NucleusFlowConfig</code> and validates directory …\nCreates a new instance of <code>NucleusFlow</code>.\nThe directory for generated output files.\nProvides processing pipeline utilities.\nProcesses the provided content with an optional context.\nProcesses content files, transforms, renders, and …\nRenders a template with the specified context.\nProvides template rendering utilities.\nThe directory containing template files.\nValidates the content without processing.\nValidates the template against the context.\nValidates the path and options for output generation.\nDefault content directory used when building the static …\nDefault output directory used for generated static files.\nDefault port for the development server.\nDefault template directory where templates are stored.\nThe current version of NucleusFlow, as defined in …\nBuilds and configures the NucleusFlow command-line …\nExecutes the command-line interface by matching the …\nDisplays the NucleusFlow banner with version and …\nMetadata extracted from content during processing.\nProcessor for Markdown content with configurable options.\nConfiguration options for content processing.\nCustom metadata fields.\nPublication date of the content.\nDescription of the content.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MarkdownProcessor</code> with default settings.\nCustomisable options for processor settings.\nProcesses Markdown content with the specified options and …\nEnable sanitisation of HTML output.\nTags associated with the content.\nTitle of the content.\nEnable generation of a Table of Contents (TOC).\nValidates content by checking for emptiness and suspicious …\nApplies a <code>ProcessorConfig</code> to the Markdown processor.\nEnables or disables footnote support in Markdown …\nEnables or disables strikethrough support in Markdown …\nEnables or disables table support in Markdown processing.\nHandles configuration of the NucleusFlow application.\nContains error types and handling for NucleusFlow.\nRepresents the main configuration structure encompassing …\nBuilds a <code>Config</code> instance by allowing multiple …\nConfiguration settings specific to content processing.\nCustom profile enabling specific user configurations.\nDevelopment profile with settings optimised for debugging.\nConfiguration settings for output generation.\nProduction profile with performance-focused settings.\nSpecifies operational profiles for configuration.\nStaging profile for intermediate testing between …\nConfiguration settings for template rendering.\nSpecifies an optional directory for storing static assets.\nBuilds the final configuration by applying all specified …\nEnables caching of rendered templates to optimise …\nConfiguration for content processing settings.\nSpecifies the path to the directory containing content …\nHolds custom configuration values specified by the user.\nCreates a default <code>Config</code> instance with preset values.\nList of supported content file extensions.\nEnables automatic extraction of metadata from content …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a custom configuration value by key, if it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnables minification of output files to reduce file size.\nInitialises a new <code>ConfigBuilder</code> instance with default …\nHolds additional content-specific configuration options.\nHolds additional template-specific configuration options.\nHolds additional output-specific configuration options.\nConfiguration for output generation settings.\nSpecifies the path to the output directory for processed …\nEnables pretty-printing of output files for readability.\nIndicates the current operational profile.\nEnables sanitisation of content to ensure it adheres to …\nSets a custom configuration value for the given key.\nEnables strict mode during template rendering, enforcing …\nConfiguration for template rendering settings.\nSpecifies the path to the directory containing template …\nValidates the configuration, ensuring necessary …\nEnables validation of content before processing.\nAdds a prefix for environment variables to override …\nAdds a configuration file to the builder.\nAdds a key-value pair to override configuration values.\nSets the profile for the configuration, such as …\nError related to configuration initialisation or …\nError encountered during content processing.\nContains the error value\nIO error encountered during file operations.\nGeneral internal error.\nThe main error type for NucleusFlow, encompassing all …\nContains the success value\nError in HTML output generation.\nA unified result type for the NucleusFlow library.\nError related to template rendering.\nCreates a <code>ConfigError</code> with a specific message.\nCreates a <code>ContentProcessingError</code> with a specific message …\nConverts a standard IO error into a …\nReturns the argument unchanged.\nCreates a general internal error with a custom message.\nCalls <code>U::from(self)</code>.\nWraps an IO error as an <code>IOError</code> variant with the specified …\nCreates an <code>OutputGenerationError</code> with a specific message, …\nCreates a <code>TemplateRenderingError</code> with a message, template …\nDetailed description of the configuration error.\nDetailed description of the content processing error.\nDescription of the output generation error.\nDescription of the template rendering error.\nOptional path of the configuration file that caused the …\nPath associated with the error.\nPath associated with the IO error.\nOptional source error providing additional context, if …\nOptional source error providing additional context, if …\nOptional source error providing additional context, if …\nThe underlying IO error.\nThe specific template file or identifier associated with …\nThe <code>html</code> module provides configuration handling\nHTML output generator with configuration options\nConfiguration for output generation\nAsset directory path\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCustom metadata to inject\nEnable minification of output\nCreate a new HTML generator with default configuration\nCustom configuration options\nEnable pretty printing\nSet asset directory\nSet metadata for output\nEnable or disable minification\nEnable or disable pretty printing\nRepresents an error that occurred while processing content.\nRepresents an invalid path error.\nErrors that may occur during processing operations.\nRepresents an error that occurred while reading a file.\nRepresents an error that occurred while writing to a file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcesses content by applying a transformation function.\nReads content from a file at the specified path.\nWrites content to a file at the specified path.\nRenderer for Handlebars templates with caching and custom …\nRepresents a custom template helper with helper name and …\nProvides details for template validation errors.\nColumn number where error occurred, if available\nExecutes the helper with the given parameters and context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilt-in helpers for template processing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number where error occurred, if available\nError message detailing the validation issue\nReturns the name of the helper for registration.\nCreates a new instance of <code>HandlebarsRenderer</code>.\nTemplate source snippet where error occurred\nRegisters a custom helper with the renderer.\nRegisters a partial template.\nEnables or disables strict mode, affecting how missing …\nHelper to convert text to uppercase.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")