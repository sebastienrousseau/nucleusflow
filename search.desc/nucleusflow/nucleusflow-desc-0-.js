searchState.loadedDescShard("nucleusflow", 0, "NucleusFlow Library\nTrait for content processing implementations.\nConcrete implementation of <code>ContentProcessor</code> that processes …\nConcrete implementation of <code>Generator</code> for generating HTML …\nConcrete implementation of <code>TemplateRenderer</code> for rendering …\nMain content processing pipeline for NucleusFlow.\nConfiguration settings for NucleusFlow.\nTrait for template rendering implementations.\nThe base path for content files.\nThe base path for template files.\nThe base path for output files.\nProvides command-line interface utilities. Command-line …\nThe directory containing content files.\nModule containing core utilities, such as configuration …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides output generation utilities.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FileContentProcessor</code>.\nCreates a new <code>HtmlTemplateRenderer</code>.\nCreates a new <code>HtmlOutputGenerator</code>.\nCreates a new <code>NucleusFlowConfig</code> and validates directory …\nCreates a new instance of <code>NucleusFlow</code>.\nThe directory for generated output files.\nProvides processing pipeline utilities.\nProcesses the provided content with an optional context.\nProcesses content files, transforms, renders, and …\nProvides processors for content transformation.\nRenders a template with the specified context.\nProvides template rendering utilities.\nThe directory containing template files.\nValidates the content without processing.\nValidates the template against the context.\nDefault content directory used when building the static …\nDefault output directory used for generated static files.\nDefault port for the development server.\nDefault template directory where templates are stored.\nThe current version of NucleusFlow, as defined in …\nBuilds and configures the NucleusFlow command-line …\nExecutes the command-line interface by matching the …\nDisplays the NucleusFlow banner with version and …\nHandles configuration of the NucleusFlow application.\nContains error types and handling for NucleusFlow.\nDefines common traits for content processing, rendering, …\nRepresents the main configuration structure encompassing …\nBuilder for constructing Config instances securely.\nConfiguration settings specific to content processing.\nCustom profile enabling specific user configurations. …\nDevelopment profile with settings optimized for debugging. …\nConfiguration settings for output generation.\nProduction profile with maximum security measures. …\nSpecifies operational profiles for configuration.\nStaging profile for intermediate testing. Implements …\nConfiguration settings for template rendering.\nList of allowed template functions\nList of allowed HTML tags if sanitization is enabled\nDirectory for static assets (sanitized path)\nBuilds the final configuration.\nEnables template caching\nTemplate cache TTL in seconds (1 hour default)\nContent processing configuration\nDirectory for content files (sanitized path)\nCustom configuration values\nList of allowed content file extensions\nEnables automatic extraction of metadata\nFile permissions for generated files (Unix only)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a custom configuration value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum cache size in bytes (100MB default)\nMaximum number of concurrent output operations\nMaximum content size in bytes (10MB default)\nMaximum metadata size in bytes (64KB default)\nMaximum output file size in bytes (100MB default)\nMaximum template size in bytes (1MB default)\nEnables output minification\nChecks if configuration needs reloading.\nCreates a new ConfigBuilder with default settings.\nAdditional content-specific options\nAdditional template-specific options\nAdditional output-specific options\nOutput generation configuration\nDirectory for output files (sanitized path)\nEnables pretty printing of output\nCurrent operational profile\nOutput rate limiting in bytes per second (0 = unlimited)\nReloads configuration if needed.\nEnables sanitization of content for security\nSets a custom configuration value.\nEnables strict syntax checking\nTemplate rendering configuration\nDirectory for template files (sanitized path)\nValidates all configuration settings.\nEnables validation of content before processing\nEnables automatic configuration reloading.\nAdds a prefix for environment variables.\nAdds a configuration file to the builder.\nSets the maximum allowed configuration file size.\nAdds a configuration override.\nSets the configuration profile.\nSets the interval for checking configuration changes.\nRepresents configuration validation errors.\nRepresents errors that occur during content parsing or …\nContains the error value\nRepresents missing file errors.\nRepresents errors related to file operations.\nIO error encountered during file operations.\nRepresents unexpected or internal errors.\nGeneral internal error.\nContains the success value\nRepresents errors during output generation.\nRepresents plugin-related errors.\nThe main error type for NucleusFlow, encompassing all …\nA unified result type for the NucleusFlow library.\nRepresents serialization/deserialization errors.\nRepresents template processing errors.\nRepresents validation errors during processing.\nCreates a new <code>Configuration</code> error with specified details, …\nCreates a new <code>ContentProcessing</code> error with the given …\nCreates a new <code>FileOperation</code> error with the specified path, …\nReturns the argument unchanged.\nCreates a new <code>Internal</code> error with specified details and …\nCreates a general <code>InternalError</code> with a custom message.\nCalls <code>U::from(self)</code>.\nWraps an IO error as an <code>IOError</code> variant with the specified …\nCreates a new <code>OutputGeneration</code> error for a specified path …\nCreates a new <code>Plugin</code> error for a specified plugin with …\nCreates a new <code>Serialization</code> error with specified details …\nCreates a new <code>TemplateProcessing</code> error for a specified …\nCreates a new <code>Validation</code> error with a message and optional …\nAdditional context or data related to the validation\nDetailed description of what went wrong\nDescription of what went wrong\nAdditional context about why the file was being accessed\nDescription of what went wrong\nDescription of the configuration error\nDescription of what failed validation\nDescription of what went wrong\nDescription of what went wrong\nDescription of what went wrong\nDescription of the internal error\nThe path where the operation failed\nThe path that wasn’t found\nThe path to the configuration file if relevant\nThe path where output was being generated\nPath associated with the IO error.\nName of the plugin that encountered an error\nThe source error if one exists\nThe underlying IO error if one exists\nThe source error if one exists\nThe source error if one exists\nThe source error if one exists\nThe source error if one exists\nThe source error if one exists\nThe source error if one exists\nThe underlying IO error.\nName of the template that failed\n<code>Context</code> additional context or configuration for processing\nTrait for implementing output generation.\n<code>Input</code> the type of content being processed\n<code>Input</code> the type of content to transform\n<code>Input</code> the type of content to validate\n<code>Output</code> the type of content produced\n<code>Output</code> the type of content produced\nTrait for types that can provide processing context.\nStruct representing configuration options for processors.\nCore trait for implementing content processors.\nTrait for types that can be shared between multiple …\nTrait for implementing pure content transformations.\nTrait for implementing content validation.\nEnable caching of processed content\nCustom options for specific processors\nReturns the argument unchanged.\nGenerates output from the given content.\nCalls <code>U::from(self)</code>.\nConverts the type into a processing context.\nConverts the type into a shareable form.\nProcesses the input content using optional context …\nEnable strict mode for processing\nTransforms the input content into the output format.\nValidates the generation parameters without performing the …\nValidates the input content.\nEnable validation before processing\nThe <code>html</code> module provides configuration handling\nHTML output generator with secure processing and asset …\nConfiguration options for HTML output generation. Provides …\nOptional directory for static assets\nClears the asset cache to free memory\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the list of cached assets\nGets the current configuration\nGets statistics about the processed HTML\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if an asset is cached\nOptional metadata for HTML head injection\nControls HTML minification\nCreates a new HtmlGenerator with default settings.\nAdditional configuration options\nEnables formatted output with proper indentation\nUpdates metadata without regenerating the entire document\nValidates HTML content without processing it\nConfigures the directory for static assets.\nSets metadata to be injected into the HTML head.\nEnables or disables HTML minification.\nAdds a custom configuration option\nEnables or disables pretty printing of output HTML.\nRepresents an error that occurred while processing content.\nRepresents an invalid path error.\nErrors that may occur during processing operations.\nRepresents an error that occurred while reading a file.\nRepresents an error that occurred while writing to a file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcesses content by applying a transformation function.\nReads content from a file at the specified path.\nWrites content to a file at the specified path.\nCommon metadata structure for processed content.\nConfiguration options for content processing.\nCustom metadata fields\nPublication date\nContent description\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarkdown processing functionality.\nCustom processor options\nEnable content sanitization\nContent tags\nContent title\nEnable content validation\nMetadata extracted from Markdown content.\nProcessor for Markdown content with advanced features and …\nConfiguration options for markdown processing.\nEnable automatic link references\nCustom metadata fields\nPublication date\nContent description\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new MarkdownProcessor with default settings.\nCustom processor options\nEnable sanitization of HTML output\nContent tags\nContent title\nEnable generation of Table of Contents\nMaximum heading level for TOC (1-6)\nApplies configuration options to the processor.\nEnables footnote support in Markdown processing.\nEnables strikethrough support in Markdown processing.\nEnables table support in Markdown processing.\nRenderer for Handlebars templates with caching and custom …\nRepresents a custom template helper with helper name and …\nProvides details for template validation errors.\nColumn number where error occurred, if available\nError details detailing the validation issue\nExecutes the helper with the given parameters and context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilt-in helpers for template processing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number where error occurred, if available\nReturns the name of the helper for registration.\nCreates a new instance of <code>HandlebarsRenderer</code>.\nTemplate source snippet where error occurred\nRegisters a custom helper with the renderer.\nRegisters a partial template.\nEnables or disables strict mode, affecting how missing …\nHelper to convert text to uppercase.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")